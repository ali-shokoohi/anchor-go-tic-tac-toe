// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package tic_tac_toe

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Play is the `play` instruction.
type Play struct {
	Tile *Tile

	// [0] = [WRITE] game
	//
	// [1] = [SIGNER] player
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPlayInstructionBuilder creates a new `Play` instruction builder.
func NewPlayInstructionBuilder() *Play {
	nd := &Play{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetTile sets the "tile" parameter.
func (inst *Play) SetTile(tile Tile) *Play {
	inst.Tile = &tile
	return inst
}

// SetGameAccount sets the "game" account.
func (inst *Play) SetGameAccount(game ag_solanago.PublicKey) *Play {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(game).WRITE()
	return inst
}

// GetGameAccount gets the "game" account.
func (inst *Play) GetGameAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPlayerAccount sets the "player" account.
func (inst *Play) SetPlayerAccount(player ag_solanago.PublicKey) *Play {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(player).SIGNER()
	return inst
}

// GetPlayerAccount gets the "player" account.
func (inst *Play) GetPlayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst Play) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Play,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Play) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Play) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Tile == nil {
			return errors.New("Tile parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Game is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Player is not set")
		}
	}
	return nil
}

func (inst *Play) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Play")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Tile", *inst.Tile))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  game", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("player", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj Play) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Tile` param:
	err = encoder.Encode(obj.Tile)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Play) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Tile`:
	err = decoder.Decode(&obj.Tile)
	if err != nil {
		return err
	}
	return nil
}

// NewPlayInstruction declares a new Play instruction with the provided parameters and accounts.
func NewPlayInstruction(
	// Parameters:
	tile Tile,
	// Accounts:
	game ag_solanago.PublicKey,
	player ag_solanago.PublicKey) *Play {
	return NewPlayInstructionBuilder().
		SetTile(tile).
		SetGameAccount(game).
		SetPlayerAccount(player)
}
