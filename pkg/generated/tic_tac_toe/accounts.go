// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package tic_tac_toe

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Game struct {
	Players [2]ag_solanago.PublicKey
	Turn    uint8
	Board   [3][3]Sign
	State   GameState
}

var GameDiscriminator = [8]byte{27, 90, 166, 125, 74, 100, 121, 18}

func (obj Game) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GameDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Players` param:
	err = encoder.Encode(obj.Players)
	if err != nil {
		return err
	}
	// Serialize `Turn` param:
	err = encoder.Encode(obj.Turn)
	if err != nil {
		return err
	}
	// Serialize `Board` param:
	err = encoder.Encode(obj.Board)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	{
		tmp := gameStateContainer{}
		switch realvalue := obj.State.(type) {
		case *GameStateActive:
			tmp.Enum = 0
			tmp.Active = *realvalue
		case *GameStateTie:
			tmp.Enum = 1
			tmp.Tie = *realvalue
		case *GameStateWon:
			tmp.Enum = 2
			tmp.Won = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *Game) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GameDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[27 90 166 125 74 100 121 18]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Players`:
	err = decoder.Decode(&obj.Players)
	if err != nil {
		return err
	}
	// Deserialize `Turn`:
	err = decoder.Decode(&obj.Turn)
	if err != nil {
		return err
	}
	// Deserialize `Board`:
	err = decoder.Decode(&obj.Board)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	{
		tmp := new(gameStateContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.State = (*GameStateActive)(&tmp.Enum)
		case 1:
			obj.State = (*GameStateTie)(&tmp.Enum)
		case 2:
			obj.State = &tmp.Won
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}
